# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Main Workflow

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - run: |
          corepack enable
          corepack prepare pnpm@latest

      - name: Use cached Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm run lint
      - run: pnpm run check

      - run: pnpm run build

      - uses: actions/upload-artifact@v3
        with:
          name: site
          path: dist

  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/playwright:v1.39.0-jammy
    needs: build

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - run: |
          corepack enable
          corepack prepare pnpm@latest

      - name: Use cached Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: pnpm
      - run: pnpm install --frozen-lockfile

      - name: Run Playwright tests
        run: pnpm test

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  publish:
    runs-on: ubuntu-latest
    needs:
      - build
      - test

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: site
          path: dist
      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ vars.CLOUDFLARE_PROJECT_NAME }}
          directory: dist
          branch: ${{ github.ref_name }}
